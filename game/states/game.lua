local state = {}
local destroyQueue = {}

function state:enter(prev_state, args)
    -- b2Vec2 gravity(0.0f, -10.0f);
    love.physics.setMeter(64)
    local world = love.physics.newWorld(0, 9.81*64, true)
    self.world = world
    --These callback function names can be almost any you want:
    world:setCallbacks(beginContact, endContact, preSolve, postSolve)

    text       = ""   -- we'll use this to put info text on the screen later
    persisting = 0    -- we'll use this to store the state of repeated callback calls

    local objects = {} -- table to hold all our physical objects
    local width, height = love.graphics.getWidth(), love.graphics.getHeight()
    --let's create the ground
    objects.ground = {}
    --remember, the shape (the rectangle we create next) anchors to the body from its center, so we have to move it to (650/2, 650-50/2)
    objects.ground.body = love.physics.newBody(world, width/2, height - 50/2)
    --make a rectangle with a width of 650 and a height of 50 
    objects.ground.shape = love.physics.newRectangleShape(width, 50) 
    objects.ground.fixture = love.physics.newFixture(objects.ground.body, objects.ground.shape) --attach shape to body
    objects.ground.fixture:setUserData("Ground")


    --let's create a ball
    objects.ball = {}
    objects.ball = createCircle(world, {x = width/2, y = height/2}, 20)

    -- objects.ball.body = love.physics.newBody(world, width/2, height/2, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
    -- objects.ball.shape = love.physics.newCircleShape( 20) --the ball's shape has a radius of 20\
    -- objects.ball.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 3) -- Attach fixture to body and give it a density of 1.
    -- objects.ball.fixture:setRestitution(0.9) --let the ball bounce
    -- objects.ball.fixture:setUserData("Ball")

    --let's create a couple blocks to play around with
    objects.block1 = {}
    objects.block1.body = love.physics.newBody(world, width - 450, height - 200, "dynamic")
    objects.block1.shape = love.physics.newPolygonShape( 0, 0, 50, -25, 25, -50, 75, -25, 100, 0 )
    objects.block1.fixture = love.physics.newFixture(objects.block1.body, objects.block1.shape, 5) -- A higher density gives it more mass.
    objects.block1.fixture:setUserData("Block1")

    objects.block2 = {}
    objects.block2.body = love.physics.newBody(world, width - 450, height - 250, "dynamic")
    objects.block2.shape = love.physics.newRectangleShape(0, 0, 100, 50)
    objects.block2.fixture = love.physics.newFixture(objects.block2.body, objects.block2.shape, 2)
    objects.block2.fixture:setUserData("Block2")

    self.objects = objects


    self.joint = love.physics.newFrictionJoint( objects.block1.body, objects.block2.body, width - 450, height - 100, true)

    love.graphics.setBackgroundColor(0.41, 0.53, 0.97) --set the background color to a nice blue
    -- love.window.setMode(650, 650) --set the window dimensions to 650 by 650 with no fullscreen, vsync on, and no antialiasing
end

function state:mousepressed(x, y)
end

function state:mousereleased(x, y)
end

function state:keypressed(key)
end

function state:update(dt)
    self.world:update(dt) --this puts the world into motion

    local objects = self.objects
    --here we are going to create some keyboard events
    if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
        for ind, ball in pairs(self.world:getBodies()) do
            ball:applyForce(400, 0)
        end
    elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
        for ind, ball in pairs(self.world:getBodies()) do
            ball:applyForce(-400, 0)
        end
    elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
        for ind, ball in pairs(self.world:getBodies()) do
            ball:applyForce(0, -100)
        end
    elseif love.keyboard.isDown("down") then --press the up arrow key to set the ball in the air
        for ind, ball in pairs(self.world:getBodies()) do
            ball:applyForce(400, 0)
        end
        objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
    end

    if string.len(text) > 768 then    -- cleanup when 'text' gets too long
        text = "" 
    end

    for ind, circle in pairs(destroyQueue) do
        if not circle:isDestroyed() then
            dublicateCircle(circle)
        end
        destroyQueue[ind] = nil
    end
end

function state:draw()
    local objects = self.objects
    love.graphics.setColor(0.28, 0.63, 0.05) -- set the drawing color to green for the ground
    love.graphics.polygon("fill", objects.ground.body:getWorldPoints(objects.ground.shape:getPoints())) -- draw a "filled in" polygon using the ground's coordinates
    love.graphics.setColor(0.76, 0.18, 0.05) --set the drawing color to red for the ball
    for ind, ball in pairs(self.world:getBodies()) do
        love.graphics.circle("fill", ball:getX(), ball:getY(), ball:getFixtures()[1]:getShape():getRadius())
    end

    love.graphics.setColor(0.20, 0.20, 0.20) -- set the drawing color to grey for the blocks
    love.graphics.polygon("fill", objects.block1.body:getWorldPoints(objects.block1.shape:getPoints()))
    love.graphics.polygon("fill", objects.block2.body:getWorldPoints(objects.block2.shape:getPoints()))

    love.graphics.print(text, 10, 10)
    
end

function beginContact(a, b, coll)
    x,y = coll:getNormal()
    print((a:getUserData() or "Test").." colliding with "..(b:getUserData() or "Test").." with a vector normal of: "..x..", " .. y)
end

function endContact(a, b, coll)
    persisting = 0    -- reset since they're no longer touching
    print((a:getUserData() or "Test").." uncolliding with "..(b:getUserData() or "Test"))
    if a:getUserData() == 'Ball' and b:getUserData() ~= 'Ball' then
        table.insert(destroyQueue, a)
    elseif b:getUserData() == 'Ball'  and a:getUserData() ~= 'Ball' then
        table.insert(destroyQueue, b)
    end
end

function preSolve(a, b, coll)
    if persisting == 0 then    -- only say when they first start touching
        print((a:getUserData() or "Test").." touching "..(b:getUserData() or "Test"))
    elseif persisting < 20 then    -- then just start counting
        print(persisting)
    end
    persisting = persisting + 1    -- keep track of how many updates they've been touching for
end

function postSolve(a, b, coll, normalimpulse, tangentimpulse)
end

function createCircle(world, position, range, velocity)
    local circle = {}
    circle.body = love.physics.newBody(world, position.x, position.y, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
    circle.shape = love.physics.newCircleShape(range) --the ball's shape has a radius of 20\
    circle.fixture = love.physics.newFixture(circle.body, circle.shape, 6) -- Attach fixture to body and give it a density of 1.
    if velocity and velocity.x and velocity.y then
        circle.body:setLinearVelocity(velocity.x, velocity.y)
    end
    circle.fixture:setRestitution(0.9) --let the ball bounce
    circle.fixture:setUserData("Ball")
    return circle
end

function dublicateCircle(circle)
    local range = circle:getShape():getRadius()/1.2
    if range > 5 then
        local x, y = circle:getBody():getX(), circle:getBody():getY()
        local world = circle:getBody():getWorld()
        local velocity = {}
        velocity.x, velocity.y = circle:getBody():getLinearVelocity()
        circle:getBody():destroy()
        -- circle:destroy()
        createCircle(world, {x = x+10, y = y}, range, velocity)
        createCircle(world, {x = x-10, y = y}, range, velocity)
    end
end

return state